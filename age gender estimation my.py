# -*- coding: utf-8 -*-
"""Q4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OtbNEaLoDOgQUOAOnuyYShMKanWy45bA
"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/shaoanlu/face_toolbox_keras.git
# %cd face_toolbox_keras

!gdown https://drive.google.com/uc?id=1H37LER8mRRI4q_nxpS3uQz3DcGHkTrNU
!mv lresnet100e_ir_keras.h5 ./models/verifier/insightface/lresnet100e_ir_keras.h5
!gdown https://drive.google.com/uc?id=18MyyXQIwhR5I6gzipYMiJ9ywgvFWQMvI
!mv backbone_ir50_ms1m_keras.h5 ./models/verifier/face_evoLVe_ir50/backbone_ir50_ms1m_keras.h5
!gdown https://drive.google.com/uc?id=1P_eQHU8bNJEsB6hHt_fnltOwQVKIfhiX
!mv backbone_ir50_asia_keras.h5 ./models/verifier/face_evoLVe_ir50/backbone_ir50_asia_keras.h5

!pip install keras==2.2.4
!pip install tensorflow-gpu==1.14

import warnings
warnings.filterwarnings("ignore")

import cv2
import numpy as np
from matplotlib import pyplot as plt

"""---"""

def resize_image(im, max_size=768):
    if np.max(im.shape) > max_size:
        ratio = max_size / np.max(im.shape)
        print(f"Resize image to ({str(int(im.shape[1]*ratio))}, {str(int(im.shape[0]*ratio))}).")
        return cv2.resize(im, (0,0), fx=ratio, fy=ratio)
    return im

# Test images are obtained on https://www.pexels.com/
im = cv2.imread("images/test.jpg")[..., ::-1]
im = resize_image(im) # Resize image to prevent GPU OOM.
h, w, _ = im.shape
print(h,w)
plt.imshow(im)

!pip install keras==2.3.1

from models.detector import face_detector

fd = face_detector.FaceAlignmentDetector(
    lmd_weights_path="./models/detector/FAN/2DFAN-4_keras.h5"# 2DFAN-4_keras.h5, 2DFAN-1_keras.h5
)

bboxes = fd.detect_face(im, with_landmarks=False)

assert len(bboxes) > 0, "No face detected."

# Display detected face
x0, y0, x1, y1, score = bboxes[0] # show the first detected face
x0, y0, x1, y1 = map(int, [x0, y0, x1, y1])

plt.imshow(im[x0:x1, y0:y1, :])

from models.parser import face_parser

prs = face_parser.FaceParser()

from models.detector.iris_detector import IrisDetector

from models.verifier.face_verifier import FaceVerifier

im1 = cv2.imread("images/test0.jpg")[..., ::-1]
im1 = resize_image(im1) # Resize image to prevent GPU OOM.
im2 = cv2.imread("images/BO1.jpg")[..., ::-1]
im2 = resize_image(im2) # Resize image to prevent GPU OOM.
im3 = cv2.imread("images/DT.jpg")[..., ::-1]
im3 = resize_image(im3) # Resize image to prevent GPU OOM.

fv = FaceVerifier(classes=512, extractor="facenet") # extractor="insightface"

fv.set_detector(fd)

from models.estimator.gender_age_estimator import GenderAgeEstimator

im = cv2.imread("images/BO1.jpg")[..., ::-1]
im = resize_image(im) # Resize image to prevent GPU OOM.
h, w, _ = im.shape
plt.imshow(im)

gae = GenderAgeEstimator(model_type="insightface")

gae.set_detector(fd)

gender, age = gae.predict_gender_age(im, with_detection=True)

print("Gender: female") if gender == 0 else print("Gender: male")
print(f"Age: {str(age)}")

